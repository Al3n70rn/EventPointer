% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EventPointer.R
\name{EventPointer}
\alias{EventPointer}
\title{EventPointer}
\usage{
EventPointer(Design, Contrast, affy, array, Filter = F, Qn = 0.25)
}
\arguments{
\item{Design}{Design matrix for the experiment}

\item{Contrast}{Contrast matrix for the experiment}

\item{affy}{Preprocessed aroma.affymetrix variable}

\item{array}{Type of array used in the experiment (HTA or Hjay)}

\item{Filter}{Binary variable to filter events according to expression}

\item{Qn}{Quantile used to filter the events (Bounded between 0-1, Q1 would be 0.25)}
}
\value{
data.frame with 7 columns

HGNC Symbol: HUGO identifier for the gene

Ensembl Gene Id: Ensembl Gene Identifier

Event Type: Type of alternative splicing event (Cassette, Alternative 3,Alternative 5, Alternative Last Exon, Alternative First Exon, Mutually Exclusive Exons or Complex Event)

Event Number: The corresponding event for that gene

Genomic Position: Genomic Coordinates for the event

Splicing Z Value: Corresponding Z value for the statistical test performed

Splicnig P Value: Corresponding P-value for the statistical test performed

}
\description{
The algorithm tests all the identifiable events by the Affymetrix arrays: Human Transcriptome Array 2.0 (HTA 2.0) & Human Junction Array (Hjay). Each event is statistically tested to identify if the most expressed isoform changes between different conditions.
}
\examples{
\dontrun{
         library(EventPointer)

         setwd("J:/EventPointer/")
         verbose <- Arguments$getVerbose(-8);
         timestampOn(verbose);
         projectName <- "SRSF1"
         chipType <- "HTA_AS"
         cdfGFile <- "HTA_AS,r"
         cdfG <- AffymetrixCdfFile$byChipType(cdfGFile)
         cs <- AffymetrixCelSet$byName(projectName, cdf=cdfG)
         bc <- NormExpBackgroundCorrection(cs, method="mle", tag=c("*","r11"));
         csBC <- process(bc,verbose=verbose,ram=20);
         qn <- QuantileNormalization(csBC, typesToUpdate="pm");
         csN <- process(qn,verbose=verbose,ram=20);
         plmEx <- ExonRmaPlm(csN, mergeGroups=FALSE)
         fit(plmEx, verbose=verbose)
         cesEx <- getChipEffectSet(plmEx)

         load("J:/EventPointer/DyCmatrix.Rdata")
         Events<-EventPointer(Design=Dmatrix,Contrast=Cmatrix,affy=cesEx,array="HTA",Filter=T)
       }
}

